
================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\file-scanner.py
================================================================================

import os
import mimetypes

def is_text_file(filename):
    """
    Check if a file is likely to be a text file based on its mime type
    or common code file extensions
    """
    # Common code file extensions
    code_extensions = {
        '.py', '.js', '.java', '.cpp', '.c', '.h', '.cs', '.php',
        '.rb', '.swift', '.kt', '.go', '.rs', '.ts', '.html', '.css',
        '.sql', '.sh', '.bat', '.ps1', '.txt', '.md', '.json', '.xml',
        '.yaml', '.yml', '.ini', '.conf', '.cfg', '.tsx'
    }
    
    # Check extension
    ext = os.path.splitext(filename)[1].lower()
    if ext in code_extensions:
        return True
        
    # Check mime type
    mime_type, _ = mimetypes.guess_type(filename)
    return mime_type and mime_type.startswith('text/')

def scan_directory(output_file):
    """
    Recursively scan the current directory and its subdirectories
    for text/code files and write their contents to the output file
    """
    with open(output_file, 'w', encoding='utf-8') as out:
        for root, _, files in os.walk('.'):
            for file in files:
                file_path = os.path.join(root, file)
                
                # Skip the output file itself
                if os.path.abspath(file_path) == os.path.abspath(output_file):
                    continue
                    
                if is_text_file(file_path):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            # Write file path with clear separator
                            out.write(f"\n{'='*80}\n")
                            out.write(f"File: {os.path.abspath(file_path)}\n")
                            out.write(f"{'='*80}\n\n")
                            
                            # Write file contents
                            out.write(f.read())
                            out.write('\n')
                    except Exception as e:
                        out.write(f"Error reading file {file_path}: {str(e)}\n")

if __name__ == '__main__':
    output_file = 'code_contents.txt'
    print(f"Scanning directory and writing contents to {output_file}...")
    scan_directory(output_file)
    print("Scan complete!")


================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\components\LoadingScreen.tsx
================================================================================

// src/components/LoadingScreen.tsx
import React from 'react';
import { View, ActivityIndicator, StyleSheet } from 'react-native';

function LoadingScreen(): JSX.Element {
  return (
    <View style={styles.container}>
      <ActivityIndicator size="large" color="#007AFF" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#fff',
  },
});

export default LoadingScreen;

================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\contexts\AppContext.tsx
================================================================================

// src/contexts/AppContext.tsx
import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface Pet {
  id: string;
  name: string;
  type: string;
  breed?: string;
  traits?: {
    suggested: string[];
    custom: string[];
  };
  quirks?: string;
  favoriteThings?: string;
}

interface User {
  id: string;
  name: string;
  familyMembers?: string[];
}

interface Photo {
  uri: string;
  base64?: string;
  width?: number;
  height?: number;
}

interface AppState {
  user: User | null;
  pets: Pet[];
  currentPhoto: Photo | null;
  currentThought: string | null;
}

type AppContextType = {
  state: AppState;
  actions: {
    setUser: (user: User) => void;
    addPet: (pet: Pet) => void;
    updatePet: (pet: Pet) => void;
    setCurrentPhoto: (photo: Photo) => void;
    setCurrentThought: (thought: string) => void;
  };
};

const initialState: AppState = {
  user: null,
  pets: [],
  currentPhoto: null,
  currentThought: null,
};

const STORAGE_KEYS = {
  USER: '@pet_thoughts_user',
  PETS: '@pet_thoughts_pets',
};

enum ActionTypes {
  SET_USER = 'SET_USER',
  ADD_PET = 'ADD_PET',
  UPDATE_PET = 'UPDATE_PET',
  SET_CURRENT_PHOTO = 'SET_CURRENT_PHOTO',
  SET_CURRENT_THOUGHT = 'SET_CURRENT_THOUGHT',
}

type Action =
  | { type: ActionTypes.SET_USER; payload: User }
  | { type: ActionTypes.ADD_PET; payload: Pet }
  | { type: ActionTypes.UPDATE_PET; payload: Pet }
  | { type: ActionTypes.SET_CURRENT_PHOTO; payload: Photo }
  | { type: ActionTypes.SET_CURRENT_THOUGHT; payload: string };

  function appReducer(state: AppState, action: Action): AppState {
    let newState: AppState;
    
    switch (action.type) {
      case ActionTypes.SET_USER:
        newState = {
          ...state,
          user: action.payload,
        };
        // Save user to AsyncStorage
        AsyncStorage.setItem(STORAGE_KEYS.USER, JSON.stringify(action.payload));
        return newState;
  
      case ActionTypes.ADD_PET:
        newState = {
          ...state,
          pets: [...state.pets, action.payload],
        };
        // Save updated pets list to AsyncStorage
        AsyncStorage.setItem(STORAGE_KEYS.PETS, JSON.stringify(newState.pets));
        return newState;
  
      case ActionTypes.UPDATE_PET:
        newState = {
          ...state,
          pets: state.pets.map(pet =>
            pet.id === action.payload.id ? action.payload : pet
          ),
        };
        // Save updated pets list to AsyncStorage
        AsyncStorage.setItem(STORAGE_KEYS.PETS, JSON.stringify(newState.pets));
        return newState;
  
      case ActionTypes.SET_CURRENT_PHOTO:
        return {
          ...state,
          currentPhoto: action.payload,
        };
  
      case ActionTypes.SET_CURRENT_THOUGHT:
        return {
          ...state,
          currentThought: action.payload,
        };
  
      default:
        return state;
    }
  }
  

const AppContext = createContext<AppContextType>({
  state: initialState,
  actions: {
    setUser: () => {},
    addPet: () => {},
    updatePet: () => {},
    setCurrentPhoto: () => {},
    setCurrentThought: () => {},
  },
});

interface AppProviderProps {
  children: ReactNode;
}

export function AppProvider({ children }: AppProviderProps) {
  const [state, dispatch] = useReducer(appReducer, initialState);

  // Load saved data when the app starts
  useEffect(() => {
    const loadSavedData = async () => {
      try {
        // Load user data
        const savedUser = await AsyncStorage.getItem(STORAGE_KEYS.USER);
        if (savedUser) {
          dispatch({ type: ActionTypes.SET_USER, payload: JSON.parse(savedUser) });
        }

        // Load pets data
        const savedPets = await AsyncStorage.getItem(STORAGE_KEYS.PETS);
        if (savedPets) {
          JSON.parse(savedPets).forEach((pet: Pet) => {
            dispatch({ type: ActionTypes.ADD_PET, payload: pet });
          });
        }
      } catch (error) {
        console.error('Error loading saved data:', error);
      }
    };

    loadSavedData();
  }, []);

  const setUser = (user: User) => {
    dispatch({ type: ActionTypes.SET_USER, payload: user });
  };

  const addPet = (pet: Pet) => {
    dispatch({ type: ActionTypes.ADD_PET, payload: pet });
  };

  const updatePet = (pet: Pet) => {
    dispatch({ type: ActionTypes.UPDATE_PET, payload: pet });
  };

  const setCurrentPhoto = (photo: Photo) => {
    dispatch({ type: ActionTypes.SET_CURRENT_PHOTO, payload: photo });
  };

  const setCurrentThought = (thought: string) => {
    dispatch({ type: ActionTypes.SET_CURRENT_THOUGHT, payload: thought });
  };

  const value = {
    state,
    actions: {
      setUser,
      addPet,
      updatePet,
      setCurrentPhoto,
      setCurrentThought,
    },
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
}

export function useApp(): AppContextType {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
}

================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\screens\HomeScreen.tsx
================================================================================

// src/screens/HomeScreen.tsx
import React from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { useApp } from '../contexts/AppContext';
import { launchCamera } from 'react-native-image-picker';
import type { RootStackParamList } from '../types/navigation';

type Props = NativeStackScreenProps<RootStackParamList, 'Home'>;

function HomeScreen({navigation}: Props): JSX.Element {
  const { actions } = useApp();

  const handleTakePhoto = async () => {
    try {
      const result = await launchCamera({
        mediaType: 'photo',
        includeBase64: true,
      });

      if (result.assets && result.assets[0]) {
        const photo = {
          uri: result.assets[0].uri || '',
          base64: result.assets[0].base64,
          width: result.assets[0].width,
          height: result.assets[0].height,
        };
        
        actions.setCurrentPhoto(photo);
        
        // Navigate to PhotoResult screen
        navigation.navigate('PhotoResult', {
          photoUri: photo.uri,
          base64: photo.base64,
          width: photo.width,
          height: photo.height,
        });
      }
    } catch (error) {
      console.error('Error taking photo:', error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Pet Thoughts App</Text>
      <Button title="Take Photo" onPress={handleTakePhoto} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
  },
});

export default HomeScreen;

================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\screens\PhotoResultScreen.tsx
================================================================================

// src/screens/PhotoResultScreen.tsx
import React, { useEffect, useState, useRef } from 'react';
import {
  View,
  Image,
  StyleSheet,
  Dimensions,
  Animated,
  Platform,
} from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { BlurView } from '@react-native-community/blur';
import { useApp } from '../contexts/AppContext';
import type { RootStackParamList } from '../types/navigation';

type Props = NativeStackScreenProps<RootStackParamList, 'PhotoResult'>;

function PhotoResultScreen({ route }: Props): JSX.Element {
  const { photoUri, width, height } = route.params;
  const { state } = useApp();
  const [imageLayout, setImageLayout] = useState({ width: 0, height: 0 });
  const fadeAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    // Calculate image dimensions to fit screen while maintaining aspect ratio
    if (width && height) {
      const screenWidth = Dimensions.get('window').width;
      const screenHeight = Dimensions.get('window').height;
      const imageRatio = height / width;
      const screenRatio = screenHeight / screenWidth;

      if (imageRatio > screenRatio) {
        const newHeight = screenHeight * 0.8;
        setImageLayout({
          height: newHeight,
          width: newHeight / imageRatio,
        });
      } else {
        const newWidth = screenWidth * 0.9;
        setImageLayout({
          width: newWidth,
          height: newWidth * imageRatio,
        });
      }
    }

    // Start fade-in animation
    Animated.sequence([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 1000,
        useNativeDriver: true,
      }),
    ]).start();
  }, [width, height, fadeAnim]);

  return (
    <View style={styles.container}>
      <Animated.View
        style={[
          styles.imageContainer,
          {
            opacity: fadeAnim,
          },
        ]}
      >
        <Image
          source={{ uri: photoUri }}
          style={[
            styles.image,
            {
              width: imageLayout.width,
              height: imageLayout.height,
            },
          ]}
        />
        {Platform.OS === 'ios' ? (
          <BlurView
            style={styles.thoughtContainer}
            blurType="light"
            blurAmount={10}
          >
            {/* Placeholder for thought text */}
          </BlurView>
        ) : (
          <View style={[styles.thoughtContainer, styles.androidBlur]}>
            {/* Placeholder for thought text */}
          </View>
        )}
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageContainer: {
    position: 'relative',
  },
  image: {
    resizeMode: 'contain',
  },
  thoughtContainer: {
    position: 'absolute',
    bottom: 40,
    left: 20,
    right: 20,
    minHeight: 80,
    borderRadius: 20,
    padding: 15,
  },
  androidBlur: {
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
  },
});

export default PhotoResultScreen;

================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\screens\onboarding\FamilyContextScreen.tsx
================================================================================

// src/screens/onboarding/FamilyContextScreen.tsx
import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, StyleSheet, Pressable, ScrollView } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useApp } from '../../contexts/AppContext';
import type { RootStackParamList } from '../../types/navigation';

type Props = NativeStackScreenProps<RootStackParamList, 'FamilyContext'>;

function FamilyContextScreen({ navigation, route }: Props): JSX.Element {
  const { actions } = useApp();
  const [familyInfo, setFamilyInfo] = useState({
    ownerName: '',
    familyMembers: '',
    otherPets: '',
  });


const handleComplete = async () => {
  console.log('Button pressed - starting handleComplete');
  if (!familyInfo.ownerName) {
    console.log('No owner name provided - returning early');
    return;
  }

  try {
    console.log('Saving user data...');
    // Save user data
    actions.setUser({
      id: Date.now().toString(),
      name: familyInfo.ownerName,
      familyMembers: familyInfo.familyMembers.split(',').map(name => name.trim()).filter(Boolean),
    });
    console.log('User data saved successfully');

    // Complete onboarding via the callback
    if (route.params?.onComplete) {
      console.log('Calling onComplete callback...');
      await route.params.onComplete();
      console.log('onComplete callback finished');
    } else {
      console.log('Warning: No onComplete callback found in route params');
    }
  } catch (error) {
    console.error('Error in handleComplete:', error);
  }
};


  return (
    <ScrollView style={styles.container}>
      <View style={styles.progressBar}>
        <View style={[styles.progressFill, { width: '100%' }]} />
      </View>

      <Text style={styles.title}>Last step: The Family!</Text>
      <Text style={styles.subtitle}>Help us understand who's in your pet's world</Text>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>What's your name?</Text>
        <TextInput
          style={styles.input}
          value={familyInfo.ownerName}
          onChangeText={(text) => setFamilyInfo(prev => ({ ...prev, ownerName: text }))}
          placeholder="Enter your name"
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Any other family members? (optional)</Text>
        <Text style={styles.hint}>Who else does your pet interact with daily?</Text>
        <TextInput
          style={styles.input}
          value={familyInfo.familyMembers}
          onChangeText={(text) => setFamilyInfo(prev => ({ ...prev, familyMembers: text }))}
          placeholder="Names, separated by commas"
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Other pets at home? (optional)</Text>
        <Text style={styles.hint}>Any furry siblings we should know about?</Text>
        <TextInput
          style={styles.input}
          value={familyInfo.otherPets}
          onChangeText={(text) => setFamilyInfo(prev => ({ ...prev, otherPets: text }))}
          placeholder="e.g., Max the cat, Luna the dog"
        />
      </View>

      <Text style={styles.disclaimer}>
        Don't worry, you can always update this information later!
      </Text>

      <Pressable 
        style={[
          styles.button,
          !familyInfo.ownerName && styles.buttonDisabled
        ]}
        onPress={handleComplete}
      >
        <Text style={styles.buttonText}>Let's Start!</Text>
      </Pressable>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
  progressBar: {
    height: 4,
    backgroundColor: '#E0E0E0',
    borderRadius: 2,
    marginBottom: 30,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#007AFF',
    borderRadius: 2,
  },
  title: {
    fontSize: 24,
    fontWeight: '600',
    marginBottom: 10,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 30,
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 24,
  },
  label: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 4,
    color: '#333',
  },
  hint: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
    fontStyle: 'italic',
  },
  input: {
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
  },
  disclaimer: {
    textAlign: 'center',
    color: '#666',
    fontStyle: 'italic',
    marginTop: 20,
    marginBottom: 20,
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginVertical: 20,
  },
  buttonDisabled: {
    backgroundColor: '#A0A0A0',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});

export default FamilyContextScreen;

================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\screens\onboarding\PetBasicsScreen.tsx
================================================================================

// src/screens/onboarding/PetBasicsScreen.tsx
import React, { useState } from 'react';
import { View, Text, TextInput, StyleSheet, Pressable, ScrollView } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { useApp } from '../../contexts/AppContext';
import type { RootStackParamList } from '../../types/navigation';

type Props = NativeStackScreenProps<RootStackParamList, 'PetBasics'>;

function PetBasicsScreen({ navigation }: Props): JSX.Element {
  const { actions } = useApp();
  const [petInfo, setPetInfo] = useState({
    name: '',
    type: '',
    breed: '',
  });

  const handleNext = () => {
    if (!petInfo.name || !petInfo.type) return; // Basic validation

    actions.addPet({
      id: Date.now().toString(),
      name: petInfo.name,
      type: petInfo.type,
      breed: petInfo.breed,
    });

    navigation.navigate('PetPersonality', { petName: petInfo.name });
  };
  

  return (
    <ScrollView style={styles.container}>
      <View style={styles.progressBar}>
        <View style={[styles.progressFill, { width: '33%' }]} />
      </View>

      <Text style={styles.title}>First, who's this adorable friend?</Text>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>What's their name?</Text>
        <TextInput
          style={styles.input}
          value={petInfo.name}
          onChangeText={(text) => setPetInfo(prev => ({ ...prev, name: text }))}
          placeholder="Enter pet's name"
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>What kind of pet are they?</Text>
        <TextInput
          style={styles.input}
          value={petInfo.type}
          onChangeText={(text) => setPetInfo(prev => ({ ...prev, type: text }))}
          placeholder="e.g., Cat, Dog, etc."
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Breed (optional)</Text>
        <TextInput
          style={styles.input}
          value={petInfo.breed}
          onChangeText={(text) => setPetInfo(prev => ({ ...prev, breed: text }))}
          placeholder="e.g., Persian, Golden Retriever"
        />
      </View>

      <Pressable 
        style={[
          styles.button,
          (!petInfo.name || !petInfo.type) && styles.buttonDisabled
        ]}
        onPress={handleNext}
      >
        <Text style={styles.buttonText}>Next</Text>
      </Pressable>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
  progressBar: {
    height: 4,
    backgroundColor: '#E0E0E0',
    borderRadius: 2,
    marginBottom: 30,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#007AFF',
    borderRadius: 2,
  },
  title: {
    fontSize: 24,
    fontWeight: '600',
    marginBottom: 30,
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    marginBottom: 8,
    color: '#333',
  },
  input: {
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 20,
  },
  buttonDisabled: {
    backgroundColor: '#A0A0A0',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});

export default PetBasicsScreen;

================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\screens\onboarding\PetPersonalityScreen.tsx
================================================================================

// src/screens/onboarding/PetPersonalityScreen.tsx
import React, { useState } from 'react';
import { View, Text, StyleSheet, Pressable, ScrollView, TextInput } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import { useApp } from '../../contexts/AppContext';
import type { RootStackParamList } from '../../types/navigation';

type Props = NativeStackScreenProps<RootStackParamList, 'PetPersonality'>;

interface PersonalityTrait {
  id: string;
  label: string;
  selected: boolean;
}

function PetPersonalityScreen({ route, navigation }: Props): JSX.Element {
  const { petName } = route.params;
  const { state, actions } = useApp();
  
  const [suggestedTraits, setSuggestedTraits] = useState<PersonalityTrait[]>([
    { id: '1', label: 'Loving', selected: false },
    { id: '2', label: 'Independent', selected: false },
    { id: '3', label: 'Playful', selected: false },
    { id: '4', label: 'Shy', selected: false },
    { id: '5', label: 'Energetic', selected: false },
    { id: '6', label: 'Lazy', selected: false },
    { id: '7', label: 'Curious', selected: false },
    { id: '8', label: 'Mischievous', selected: false },
  ]);

  const [customTraits, setCustomTraits] = useState('');
  const [quirks, setQuirks] = useState('');
  const [favoriteThings, setFavoriteThings] = useState('');

  const toggleTrait = (id: string) => {
    setSuggestedTraits(prev => prev.map(trait => 
      trait.id === id ? { ...trait, selected: !trait.selected } : trait
    ));
  };

  const handleNext = () => {
    // Find the current pet in our state
    const currentPet = state.pets[state.pets.length - 1];
    
    // Update the pet with personality information
    if (currentPet) {
      const updatedPet = {
        ...currentPet,
        traits: {
          suggested: suggestedTraits.filter(t => t.selected).map(t => t.label),
          custom: customTraits.split(',').map(t => t.trim()).filter(Boolean)
        },
        quirks: quirks,
        favoriteThings: favoriteThings
      };

      // Update the pet in our context
      actions.updatePet(updatedPet);
    }

    // Just navigate without params to preserve initialParams from App.tsx
    navigation.navigate('FamilyContext', {})
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.progressBar}>
        <View style={[styles.progressFill, { width: '66%' }]} />
      </View>

      <Text style={styles.title}>Tell us about {petName}!</Text>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Personality Traits</Text>
        <Text style={styles.sectionSubtitle}>Tap any that fit, or add your own below:</Text>

        <View style={styles.traitsContainer}>
          {suggestedTraits.map(trait => (
            <Pressable
              key={trait.id}
              style={[styles.traitButton, trait.selected && styles.traitSelected]}
              onPress={() => toggleTrait(trait.id)}
            >
              <Text 
                style={[styles.traitText, trait.selected && styles.traitTextSelected]}
              >
                {trait.label}
              </Text>
            </Pressable>
          ))}
        </View>

        <Text style={styles.label}>Add more traits:</Text>
        <TextInput
          style={styles.input}
          value={customTraits}
          onChangeText={setCustomTraits}
          placeholder="e.g., dramatic, food-obsessed, gentle"
          multiline
        />
      </View>

      <View style={styles.section}>
        <Text style={styles.label}>What makes {petName} unique?</Text>
        <Text style={styles.hint}>Any quirks or special behaviors?</Text>
        <TextInput
          style={styles.input}
          value={quirks}
          onChangeText={setQuirks}
          placeholder="e.g., always sleeps in the sink, follows me to the bathroom"
          multiline
        />
      </View>

      <View style={styles.section}>
        <Text style={styles.label}>What does {petName} love?</Text>
        <Text style={styles.hint}>Favorite activities, treats, or spots in the house?</Text>
        <TextInput
          style={styles.input}
          value={favoriteThings}
          onChangeText={setFavoriteThings}
          placeholder="e.g., chasing laser dots, belly rubs, tuna treats"
          multiline
        />
      </View>

      <Text style={styles.hint}>Don't worry about being too detailed - the more we know about {petName}, the better we can understand their thoughts!</Text>

      <Pressable 
        style={styles.button}
        onPress={handleNext}
      >
        <Text style={styles.buttonText}>Next</Text>
      </Pressable>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
  },
  progressBar: {
    height: 4,
    backgroundColor: '#E0E0E0',
    borderRadius: 2,
    marginBottom: 30,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#007AFF',
    borderRadius: 2,
  },
  title: {
    fontSize: 24,
    fontWeight: '600',
    marginBottom: 20,
    textAlign: 'center',
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 4,
  },
  sectionSubtitle: {
    fontSize: 14,
    color: '#666',
    marginBottom: 12,
  },
  traitsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'flex-start',
    gap: 8,
    marginBottom: 16,
  },
  traitButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  traitSelected: {
    backgroundColor: '#007AFF',
  },
  traitText: {
    color: '#007AFF',
    fontSize: 16,
  },
  traitTextSelected: {
    color: '#fff',
  },
  label: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 4,
    color: '#333',
  },
  hint: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
    fontStyle: 'italic',
  },
  input: {
    borderWidth: 1,
    borderColor: '#E0E0E0',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    minHeight: 44,
    textAlignVertical: 'top',
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginVertical: 20,
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});

export default PetPersonalityScreen;

================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\screens\onboarding\WelcomeScreen.tsx
================================================================================

// src/screens/onboarding/WelcomeScreen.tsx
import React from 'react';
import { View, Text, StyleSheet, Pressable } from 'react-native';
import { NativeStackScreenProps } from '@react-navigation/native-stack';
import type { RootStackParamList } from '../../types/navigation';

type Props = NativeStackScreenProps<RootStackParamList, 'Welcome'>;

function WelcomeScreen({ navigation }: Props): JSX.Element {
  return (
    <View style={styles.container}>
      <View style={styles.contentContainer}>
        <Text style={styles.title}>Welcome to Pet Thoughts!</Text>
        <Text style={styles.subtitle}>
          Let's get to know your furry friend so we can understand their thoughts better!
        </Text>
      </View>
      
      <Pressable 
        style={styles.button}
        onPress={() => navigation.navigate('PetBasics')}
      >
        <Text style={styles.buttonText}>Let's Begin!</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 20,
    justifyContent: 'space-between',
  },
  contentContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 20,
  },
  subtitle: {
    fontSize: 18,
    textAlign: 'center',
    color: '#666',
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
});

export default WelcomeScreen;

================================================================================
File: B:\IOS Dev\pet-thoughts-app\PetThoughtsApp\src\types\navigation.ts
================================================================================

// src/types/navigation.ts
export type RootStackParamList = {
  Welcome: undefined;
  PetBasics: undefined;
  PetPersonality: {
    petName: string;
  };
  FamilyContext: {
    onComplete?: () => Promise<void>;
  };
  Home: undefined;
  PhotoResult: {
    photoUri: string;
    base64?: string;
    width?: number;
    height?: number;
  };
};
